import os
import sqlite3
import hashlib
import pefile

# Define function to calculate hashes
def calculate_hashes(file_path):
    # Read file contents
    with open(file_path, 'rb') as f:
        data = f.read()

    # Calculate MD5 hash
    md5 = hashlib.md5(data).hexdigest()

    # Load file into pefile
    try:
        pe = pefile.PE(data=data)
    except:
        return None

    # Calculate Import Hash (Imp_H)
    imp_h = pe.get_imphash()

    # Calculate PE Hash (Pe_H)
    pe_h = pe.generate_checksum()

    # Calculate SHA-256 hash (Sd_H) and recursive SHA-256 hash (RSd_H)
    sha256 = hashlib.sha256(data).hexdigest()
    sha256_rec = hashlib.sha256(hashlib.sha256(data).digest()).hexdigest()

    return [md5, imp_h, pe_h, sha256, sha256_rec]

# Connect to database
conn = sqlite3.connect("D:/uit/co che/Similarity Hash based Scoring of Portable Executable/Database/Hdb.db")
c = conn.cursor()

# Create table if not exists
c.execute('''CREATE TABLE IF NOT EXISTS signatures
             (file_id INTEGER PRIMARY KEY AUTOINCREMENT,
              md5 text UNIQUE, imp_h text, pe_h text, sd_h text, rsd_h text)''')

# Loop through files in directory
directory = "D:/uit/co che/pe_machine_learning_dataset(passwordis_infected)/pe-machine-learning-dataset/New folder"
for file_id, filename in enumerate(os.listdir(directory)):
    file_path = os.path.join(directory, filename)
    if os.path.isfile(file_path):
        # Calculate hashes for file
        hashes = calculate_hashes(file_path)
        if hashes is not None:
            # Insert hashes into database
            c.execute("INSERT OR IGNORE INTO signatures (md5, imp_h, pe_h, sd_h, rsd_h) VALUES (?, ?, ?, ?, ?)", hashes)
            # Update the file_id for the inserted row
            c.execute("UPDATE signatures SET file_id=? WHERE md5=?", (file_id+1, hashes[0]))


# Commit changes and close connection
conn.commit()
conn.close()
