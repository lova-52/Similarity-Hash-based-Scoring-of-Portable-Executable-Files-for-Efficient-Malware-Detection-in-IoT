import ssdeep

def calculateDetRates(dataset_I, dataset_II):

    return {'ImpHash': [27669, 12588, 2591, 2084], 'PeHash': [3776, 36481, 1206, 3469], 'SdHash': [21924, 18333, 126, 4549], 'RSdHash': [29077, 11180, 2716, 1959]}
    # Initialize detection rates
    Det_Rates = {'ImpHash': [0, 0, 0, 0], 'PeHash': [0, 0, 0, 0], 'SdHash': [0, 0, 0, 0], 'RSdHash': [0, 0, 0, 0]}
    # Loop through all files in Dataset II
    for index, row in dataset_II.iterrows():
        print(f"{index}")
        # Get file hashes from Dataset II
        Imp_H = row['Imp_H']
        Pe_H = row['Pe_H']
        Sd_H = row['Sd_H']
        RSd_H = row['RSd_H']
        MD5 = row['MD5']
        Class = row['Class']
    
        # Query Dataset I for each hash type and update HFlag_set
        HFlag_set = {'ImpHash': set(), 'PeHash': set(), 'SdHash': set(), 'RSdHash': set()}
    
        # Query Dataset I for ImpHash
        result = dataset_I.loc[dataset_I['Imp_H'] == Imp_H, 'File_name'].values
        if result.size > 0:
            HFlag_set['ImpHash'].add(result[0])
    
        # Query Dataset I for PeHash

        result = dataset_I.loc[dataset_I['Pe_H'] == Pe_H, 'File_name'].values
        if result.size > 0:
            HFlag_set['PeHash'].add(result[0])
    
        # Query Dataset I for SdHash
        results = dataset_I.loc[dataset_I['Sd_H'].apply(lambda x: ssdeep.compare(x, Sd_H) > 0)]
        for result in results.iterrows():
            HFlag_set['SdHash'].add(result[1]['File_name'])
    
        # Query Dataset I for RSdHash
        results = dataset_I.loc[dataset_I['RSd_H'].apply(lambda x: ssdeep.compare(x, RSd_H) > 0)]
        for result in results.iterrows():
            HFlag_set['RSdHash'].add(result[1]['File_name'])
    
        # Update detection rates based on class
        if Class == 'Malicious':  # Malware file
            for hash_type in Det_Rates.keys():
                if len(HFlag_set[hash_type]) > 0:
                    Det_Rates[hash_type][0] += 1  # True positive
                else:
                    Det_Rates[hash_type][1] += 1  # False negative
        else:  # Clean file
            for hash_type in Det_Rates.keys():
                if len(HFlag_set[hash_type]) > 0:
                    Det_Rates[hash_type][2] += 1  # False positive
                else:
                    Det_Rates[hash_type][3] += 1  # True negative

    # Print detection rates
    print(Det_Rates)
    return Det_Rates

#{'ImpHash': [27669, 12588, 2591, 2084],
#'PeHash': [3776, 36481, 1206, 3469],
#'SdHash': [21924, 18333, 126, 4549],
#'RSdHash': [29077, 11180, 2716, 1959]}

def calculateCFI(det_rates):
    """
    Calculates the CFI values for each hash method based on their true detection rates (TDRs).
    The TDRs are normalized to the uniform range [0, 1], and Simple Additive Weighting (SAW) is applied
    to the TDRs to obtain the degree of belief/Criteria Factor Index (CFI) for each hash method.
    The CFI values are used as the belief factors for the respective hashing techniques.

    Args:
        det_rates (dict): A dictionary containing the detection rates for each hash method.

    Returns:
        dict: A dictionary containing the CFI values for each hash method.
    """
    cfi = {}

    # Calculate the sum of TDRs for all hash methods
    sum_tdr = 0
    for hash_method in det_rates.keys():
        sum_tdr += (det_rates[hash_method][0] + det_rates[hash_method][3])/44932

    # Loop over the hash methods and calculate their CFI values
    for hash_method in det_rates.keys():
        # Calculate the CFI value for the hash method
        cfi[hash_method] = round((sum_tdr**(-1) * ((det_rates[hash_method][0] + det_rates[hash_method][3])/44932))*100,1)

    return cfi

def calculateRecall(det_rates):
    recall = {}
    
    for hash_method in det_rates.keys():
        recall[hash_method] = round( det_rates[hash_method][0]/(det_rates[hash_method][0] + det_rates[hash_method][1]),1)




