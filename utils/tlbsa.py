import ssdeep
import csv

def calculate_esf(det_rates, cfi, dataset_I, dataset_II):
    output_file = 'esf_values.csv'
    esf = {}
    for method in det_rates.keys():
        if method == 'Pe_H' or method == 'Imp_H':
            if det_rates[method][0] > 0:
                esf[method] = cfi[method]
            else:
                esf[method] = 0
        elif method == 'Sd_H' or method == 'RSd_H':
            max_similarity = 0
            for index, row in dataset_II.iterrows():
                query_result = dataset_I.loc[dataset_I[method].apply(lambda x: ssdeep.compare(x, row[method]) > 0)]
                if not query_result.empty:
                    similarity = max(query_result.apply(lambda x: ssdeep.compare(x[method], row[method]), axis=1))/100
                    if similarity > max_similarity:
                        max_similarity = similarity
                        esf[method] = cfi[method] * max_similarity
    
    # Write esf values to a CSV file
    with open(output_file, 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['esf'])
        for value in esf.values():
            writer.writerow([value])

    print(f"ESF values written to {output_file}")

    return esf

def fuzzy_logic_algebraic_sum(det_rates, cfi, dataset_I, dataset_II):
    esf = calculate_esf(det_rates, cfi, dataset_I, dataset_II)
    # calculate degree of belief for Malicious hypothesis
    dob_m = 1
    for method in esf.keys():
        print(dob_m, "*= ", 1-esf[method])
        dob_m *= 1 - esf[method]
    dob_m = 1 - dob_m
    print(dob_m)

    # calculate degree of belief for Benign hypothesis
    dob_b = 1
    for method in esf.keys():
        dob_b *= esf[method]
    dob_b = 1 - dob_b
    print(dob_b)

    # calculate degree of belief for Suspicious hypothesis
    dob_se = 1 - dob_m - dob_b
    
    # calculate overall degree of belief using Fuzzy Logic and the algebraic sum formula
    o_dob = dob_m + dob_b - dob_m * dob_b
    
    return o_dob

def certainty_factor_algebraic_sum(det_rates, cfi, dataset_I, dataset_II):
    esf = calculate_esf(det_rates, cfi, dataset_I, dataset_II)
 
    # calculate degree of belief for Malicious hypothesis
    dob_m = 1
    for method in esf.keys():
        dob_m *= 1 - esf[method]
    dob_m = 1 - dob_m
    
    # calculate degree of belief for Benign hypothesis
    dob_b = 1
    for method in esf.keys():
        dob_b *= esf[method]
    dob_b = 1 - dob_b
    
    # calculate degree of belief for Suspicious hypothesis
    dob_se = 1 - dob_m - dob_b
    
    # calculate overall degree of belief using the Certainty Factor model
    dob_common = max(dob_m, dob_b, dob_se)
    if dob_common == 0:
        o_dob = 0
    else:
        # calculate overall degree of belief using the Archimedean t-conorm formula
        o_dob = (dob_m + dob_b) / (1 + dob_m * dob_b)
    
    return o_dob

def calculate_tlbsa(det_rates, cfi, dataset_I, dataset_II):
    fuzzy_sum = fuzzy_logic_algebraic_sum(det_rates, cfi, dataset_I, dataset_II)
    certainty_factor_sum = certainty_factor_algebraic_sum(det_rates, cfi, dataset_I, dataset_II)
    print("Fuzzy logic algebraic sum = ", fuzzy_sum)
    print("Certainty Factor Model algebraic sum = ", certainty_factor_sum)


