"""
In this step, the authors are evaluating the individual performance of different hash functions in detecting malware. They are using Dataset II, which contains both malicious and clean files.

First, they compare the four different hash values (MD5, ImpHash, PeHash, and Ssdeep) computed for each file in Dataset II with the hash values stored in the Hdb (hash database). For each file in Dataset II, they run four queries against the Hdb to find the matching hashes. The results of each query are stored in a set of tuples, denoted by XHi.

If a hash value for a file is found in the Hdb, the corresponding position in the HFlag_set is set to indicate that the file has that hash. If a hash value is not found in the Hdb, the corresponding position in the HFlag_set remains null.

For Ssdeep hash, they calculate the maximum similarity percentage between the file's hash and the hashes in the Hdb. If the similarity percentage is greater than zero, the corresponding position in the HFlag_set is set.

After processing all files in Dataset II, the authors use Algorithm II to calculate the detection rates for each hash function. The detection rates are calculated based on the confusion matrix parameters (true positive, false positive, true negative, false negative) for each hash function.

In summary, Step 4a involves comparing the hash values computed for files in Dataset II with the hash values stored in the Hdb, setting the corresponding position in the HFlag_set, and calculating the detection rates for each hash function.
"""

import pandas as pd
import ssdeep
import hashlib
import sqlite3


# Load Dataset II from CSV
dataset = pd.read_csv('D:/uit/co che/Dataset/DatasetII_new.csv')

# Connect to Hdb SQLite database
conn = sqlite3.connect('D:/uit/co che/Similarity Hash based Scoring of Portable Executable/Database/Hdb.db')
c = conn.cursor()

# Initialize detection rates
Det_Rates = {'ImpHash': [0, 0, 0, 0], 'PeHash': [0, 0, 0, 0], 'SdHash': [0, 0, 0, 0], 'RSdHash': [0, 0, 0, 0]}

# Loop through all files in Dataset II
for index, row in dataset.iterrows():
    # Get file hashes from Dataset II
    Imp_H = row['Imp_H']
    Pe_H = row['Pe_H']
    Sd_H = row['Sd_H']
    RSd_H = row['RSd_H']
    MD5 = row['MD5']
    Class = row['Class']
    
    # Query Hdb for each hash type and update HFlag_set
    HFlag_set = {'ImpHash': set(), 'PeHash': set(), 'SdHash': set(), 'RSdHash': set()}
    
    # Query Hdb for ImpHash
    c.execute('SELECT File_name, Imp_H FROM Hdbtable WHERE Imp_H = ?', (Imp_H,))
    result = c.fetchone()
    if result is not None:
        HFlag_set['ImpHash'].add(result[0])
    
    # Query Hdb for PeHash
    c.execute('SELECT File_name, Pe_H FROM Hdbtable WHERE Pe_H = ?', (Pe_H,))
    result = c.fetchone()
    if result is not None:
        HFlag_set['PeHash'].add(result[0])
    
    # Query Hdb for SdHash
    c.execute('SELECT File_name, Sd_H FROM Hdbtable')
    results = c.fetchall()
    for result in results:
        if ssdeep.compare(Sd_H, result[1]) > 0:
            HFlag_set['SdHash'].add(result[0])
    
    # Query Hdb for RSdHash
    c.execute('SELECT File_name, RSd_H FROM Hdbtable')
    results = c.fetchall()
    for result in results:
        if ssdeep.compare(RSd_H, result[1]) > 0:
            HFlag_set['RSdHash'].add(result[0])
    
    # Update detection rates based on class
    if Class == 'Malware':  # Malware file
        for hash_type in Det_Rates.keys():
            if len(HFlag_set[hash_type]) > 0:
                Det_Rates[hash_type][0] += 1  # True positive
            else:
                Det_Rates[hash_type][1] += 1  # False negative
    else:  # Clean file
        for hash_type in Det_Rates.keys():
            if len(HFlag_set[hash_type]) > 0:
                Det_Rates[hash_type][2] += 1  # False positive
            else:
                Det_Rates[hash_type][3] += 1  # True negative

# Print detection rates
print(Det_Rates)

# Close connection to Hdb SQLite database
conn.close()
