import pandas as pd
import ssdeep
import hashlib

# Load Dataset II from CSV
dataset_II = pd.read_csv('D:/uit/co che/Dataset/DatasetII_new.csv')

# Load Dataset I from CSV
dataset_I = pd.read_csv('D:/uit/co che/Dataset/DatasetI_new.csv')

# Initialize detection rates
Det_Rates = {'ImpHash': [0, 0, 0, 0], 'PeHash': [0, 0, 0, 0], 'SdHash': [0, 0, 0, 0], 'RSdHash': [0, 0, 0, 0]}

# Loop through all files in Dataset II
for index, row in dataset_II.iterrows():
    print(f"{index}")
    # Get file hashes from Dataset II
    Imp_H = row['Imp_H']
    Pe_H = row['Pe_H']
    Sd_H = row['Sd_H']
    RSd_H = row['RSd_H']
    MD5 = row['MD5']
    Class = row['Class']
    
    # Query Dataset I for each hash type and update HFlag_set
    HFlag_set = {'ImpHash': set(), 'PeHash': set(), 'SdHash': set(), 'RSdHash': set()}
    
    # Query Dataset I for ImpHash
    result = dataset_I.loc[dataset_I['Imp_H'] == Imp_H, 'File_name'].values
    if result.size > 0:
        HFlag_set['ImpHash'].add(result[0])
    
    # Query Dataset I for PeHash
    result = dataset_I.loc[dataset_I['Pe_H'] == Pe_H, 'File_name'].values
    if result.size > 0:
        HFlag_set['PeHash'].add(result[0])
    
    # Query Dataset I for SdHash
    results = dataset_I.loc[dataset_I['Sd_H'].apply(lambda x: ssdeep.compare(x, Sd_H) > 0)]
    for result in results.iterrows():
        HFlag_set['SdHash'].add(result[1]['File_name'])
    
    # Query Dataset I for RSdHash
    results = dataset_I.loc[dataset_I['RSd_H'].apply(lambda x: ssdeep.compare(x, RSd_H) > 0)]
    for result in results.iterrows():
        HFlag_set['RSdHash'].add(result[1]['File_name'])
    
    # Update detection rates based on class
    if Class == 'Malware':  # Malware file
        for hash_type in Det_Rates.keys():
            if len(HFlag_set[hash_type]) > 0:
                Det_Rates[hash_type][0] += 1  # True positive
            else:
                Det_Rates[hash_type][1] += 1  # False negative
    else:  # Clean file
        for hash_type in Det_Rates.keys():
            if len(HFlag_set[hash_type]) > 0:
                Det_Rates[hash_type][2] += 1  # False positive
            else:
                Det_Rates[hash_type][3] += 1  # True negative

# Print detection rates
print(Det_Rates)
